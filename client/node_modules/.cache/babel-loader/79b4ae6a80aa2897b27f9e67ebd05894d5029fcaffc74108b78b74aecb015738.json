{"ast":null,"code":"var _jsxFileName = \"C:\\\\Coding\\\\intel-project\\\\client\\\\src\\\\components\\\\GanttChartComponent.jsx\";\nimport React from 'react';\nimport { Chart } from 'react-chartjs-2';\nimport 'chart.js/auto';\nimport { Chart as ChartJS, TimeScale, LinearScale, CategoryScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport 'chartjs-adapter-date-fns';\n\n// Register required components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(TimeScale, LinearScale, CategoryScale, BarElement, Title, Tooltip, Legend);\nfunction GanttChartComponent({\n  schedule,\n  machines\n}) {\n  console.log('Schedule Data:', schedule);\n  console.log('Machines Data:', machines);\n  if (!schedule || !schedule.length) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No schedule data available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Extract unique machine IDs\n  const machineIds = [...new Set(schedule.map(task => task.machine_id))];\n\n  // Map machine statuses for background annotations\n  const annotations = machineIds.reduce((acc, machineId) => {\n    const machine = machines.find(m => m.id.toString() === machineId);\n    if (machine && machine.status !== 'available') {\n      acc.push({\n        type: 'box',\n        yMin: machineId,\n        yMax: machineId,\n        xMin: new Date(Math.min(...schedule.map(task => new Date(task.start_time)))),\n        xMax: new Date(Math.max(...schedule.map(task => new Date(task.end_time)))),\n        backgroundColor: machine.status === 'maintenance' ? 'rgba(255, 165, 0, 0.2)' : 'rgba(128, 128, 128, 0.2)',\n        borderColor: 'rgba(0, 0, 0, 0.5)',\n        borderWidth: 1,\n        label: {\n          content: `${machine.status} (Priority: ${machine.priority})`,\n          enabled: true,\n          position: 'center'\n        }\n      });\n    }\n    return acc;\n  }, []);\n  const data = {\n    datasets: schedule.reduce((acc, task, index) => {\n      const dataset = acc.find(ds => ds.label === `Job ${task.job_id}`);\n      if (dataset) {\n        dataset.data.push({\n          x: new Date(task.start_time),\n          y: task.machine_id,\n          duration: (new Date(task.end_time) - new Date(task.start_time)) / 1000 / 60\n        });\n      } else {\n        acc.push({\n          label: `Job ${task.job_id}`,\n          data: [{\n            x: new Date(task.start_time),\n            y: task.machine_id,\n            duration: (new Date(task.end_time) - new Date(task.start_time)) / 1000 / 60\n          }],\n          backgroundColor: `hsl(${index * 60}, 70%, 50%)`,\n          barThickness: 20\n        });\n      }\n      return acc;\n    }, [])\n  };\n  console.log('Chart Data:', data);\n  const options = {\n    indexAxis: 'y',\n    scales: {\n      x: {\n        type: 'time',\n        time: {\n          unit: 'minute',\n          displayFormats: {\n            minute: 'HH:mm'\n          }\n        },\n        title: {\n          display: true,\n          text: 'Time'\n        },\n        min: new Date(Math.min(...schedule.map(task => new Date(task.start_time)))).toISOString(),\n        max: new Date(Math.max(...schedule.map(task => new Date(task.end_time)))).toISOString()\n      },\n      y: {\n        type: 'category',\n        labels: machineIds,\n        title: {\n          display: true,\n          text: 'Machine'\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        display: true\n      },\n      tooltip: {\n        callbacks: {\n          label: context => {\n            const dataPoint = context.dataset.data[context.dataIndex];\n            return `Job ${context.dataset.label}: ${dataPoint.duration} minutes`;\n          }\n        }\n      },\n      annotation: {\n        annotations\n      }\n    },\n    elements: {\n      bar: {\n        borderWidth: 1,\n        borderColor: '#000'\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gantt-chart\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Gantt Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chart, {\n      type: \"bar\",\n      data: data,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n}\n_c = GanttChartComponent;\nexport default GanttChartComponent;\nvar _c;\n$RefreshReg$(_c, \"GanttChartComponent\");","map":{"version":3,"names":["React","Chart","ChartJS","TimeScale","LinearScale","CategoryScale","BarElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","GanttChartComponent","schedule","machines","console","log","length","children","fileName","_jsxFileName","lineNumber","columnNumber","machineIds","Set","map","task","machine_id","annotations","reduce","acc","machineId","machine","find","m","id","toString","status","push","type","yMin","yMax","xMin","Date","Math","min","start_time","xMax","max","end_time","backgroundColor","borderColor","borderWidth","label","content","priority","enabled","position","data","datasets","index","dataset","ds","job_id","x","y","duration","barThickness","options","indexAxis","scales","time","unit","displayFormats","minute","title","display","text","toISOString","labels","plugins","legend","tooltip","callbacks","context","dataPoint","dataIndex","annotation","elements","bar","className","_c","$RefreshReg$"],"sources":["C:/Coding/intel-project/client/src/components/GanttChartComponent.jsx"],"sourcesContent":["import React from 'react';\r\nimport { Chart } from 'react-chartjs-2';\r\nimport 'chart.js/auto';\r\nimport { Chart as ChartJS, TimeScale, LinearScale, CategoryScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\r\nimport 'chartjs-adapter-date-fns';\r\n\r\n// Register required components\r\nChartJS.register(TimeScale, LinearScale, CategoryScale, BarElement, Title, Tooltip, Legend);\r\n\r\nfunction GanttChartComponent({ schedule, machines }) {\r\n  console.log('Schedule Data:', schedule);\r\n  console.log('Machines Data:', machines);\r\n\r\n  if (!schedule || !schedule.length) {\r\n    return <div>No schedule data available</div>;\r\n  }\r\n\r\n  // Extract unique machine IDs\r\n  const machineIds = [...new Set(schedule.map(task => task.machine_id))];\r\n\r\n  // Map machine statuses for background annotations\r\n  const annotations = machineIds.reduce((acc, machineId) => {\r\n    const machine = machines.find(m => m.id.toString() === machineId);\r\n    if (machine && machine.status !== 'available') {\r\n      acc.push({\r\n        type: 'box',\r\n        yMin: machineId,\r\n        yMax: machineId,\r\n        xMin: new Date(Math.min(...schedule.map(task => new Date(task.start_time)))),\r\n        xMax: new Date(Math.max(...schedule.map(task => new Date(task.end_time)))),\r\n        backgroundColor: machine.status === 'maintenance' ? 'rgba(255, 165, 0, 0.2)' : 'rgba(128, 128, 128, 0.2)',\r\n        borderColor: 'rgba(0, 0, 0, 0.5)',\r\n        borderWidth: 1,\r\n        label: {\r\n          content: `${machine.status} (Priority: ${machine.priority})`,\r\n          enabled: true,\r\n          position: 'center',\r\n        },\r\n      });\r\n    }\r\n    return acc;\r\n  }, []);\r\n\r\n  const data = {\r\n    datasets: schedule.reduce((acc, task, index) => {\r\n      const dataset = acc.find(ds => ds.label === `Job ${task.job_id}`);\r\n      if (dataset) {\r\n        dataset.data.push({\r\n          x: new Date(task.start_time),\r\n          y: task.machine_id,\r\n          duration: (new Date(task.end_time) - new Date(task.start_time)) / 1000 / 60,\r\n        });\r\n      } else {\r\n        acc.push({\r\n          label: `Job ${task.job_id}`,\r\n          data: [{\r\n            x: new Date(task.start_time),\r\n            y: task.machine_id,\r\n            duration: (new Date(task.end_time) - new Date(task.start_time)) / 1000 / 60,\r\n          }],\r\n          backgroundColor: `hsl(${index * 60}, 70%, 50%)`,\r\n          barThickness: 20,\r\n        });\r\n      }\r\n      return acc;\r\n    }, []),\r\n  };\r\n\r\n  console.log('Chart Data:', data);\r\n\r\n  const options = {\r\n    indexAxis: 'y',\r\n    scales: {\r\n      x: {\r\n        type: 'time',\r\n        time: {\r\n          unit: 'minute',\r\n          displayFormats: {\r\n            minute: 'HH:mm',\r\n          },\r\n        },\r\n        title: {\r\n          display: true,\r\n          text: 'Time',\r\n        },\r\n        min: new Date(Math.min(...schedule.map(task => new Date(task.start_time)))).toISOString(),\r\n        max: new Date(Math.max(...schedule.map(task => new Date(task.end_time)))).toISOString(),\r\n      },\r\n      y: {\r\n        type: 'category',\r\n        labels: machineIds,\r\n        title: {\r\n          display: true,\r\n          text: 'Machine',\r\n        },\r\n      },\r\n    },\r\n    plugins: {\r\n      legend: {\r\n        display: true,\r\n      },\r\n      tooltip: {\r\n        callbacks: {\r\n          label: (context) => {\r\n            const dataPoint = context.dataset.data[context.dataIndex];\r\n            return `Job ${context.dataset.label}: ${dataPoint.duration} minutes`;\r\n          },\r\n        },\r\n      },\r\n      annotation: {\r\n        annotations,\r\n      },\r\n    },\r\n    elements: {\r\n      bar: {\r\n        borderWidth: 1,\r\n        borderColor: '#000',\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div className=\"gantt-chart\">\r\n      <h2>Gantt Chart</h2>\r\n      <Chart type=\"bar\" data={data} options={options} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GanttChartComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}