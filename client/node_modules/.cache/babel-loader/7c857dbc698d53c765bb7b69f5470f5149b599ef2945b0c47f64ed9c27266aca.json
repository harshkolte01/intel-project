{"ast":null,"code":"var _jsxFileName = \"C:\\\\Coding\\\\intel-project\\\\client\\\\src\\\\components\\\\GanttChartComponent.jsx\";\nimport React from 'react';\nimport { Chart } from 'react-chartjs-2';\nimport 'chart.js/auto';\nimport { Chart as ChartJS, TimeScale, LinearScale, CategoryScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport 'chartjs-adapter-date-fns';\n\n// Register required components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(TimeScale, LinearScale, CategoryScale, BarElement, Title, Tooltip, Legend);\nfunction GanttChartComponent({\n  schedule\n}) {\n  // Debug: Log schedule to ensure data is valid\n  console.log('Schedule Data:', schedule);\n\n  // Fallback if schedule is empty\n  if (!schedule || !schedule.length) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No schedule data available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Extract unique machine IDs for y-axis\n  const machineIds = [...new Set(schedule.map(task => task.machine_id))];\n  const data = {\n    datasets: schedule.reduce((acc, task, index) => {\n      const dataset = acc.find(ds => ds.label === `Job ${task.job_id}`);\n      if (dataset) {\n        dataset.data.push({\n          x: new Date(task.start_time),\n          y: task.machine_id,\n          duration: (new Date(task.end_time) - new Date(task.start_time)) / 1000 / 60 // Duration in minutes\n        });\n      } else {\n        acc.push({\n          label: `Job ${task.job_id}`,\n          data: [{\n            x: new Date(task.start_time),\n            y: task.machine_id,\n            duration: (new Date(task.end_time) - new Date(task.start_time)) / 1000 / 60\n          }],\n          backgroundColor: `hsl(${index * 60}, 70%, 50%)`,\n          barThickness: 20 // Ensure bars are visible\n        });\n      }\n      return acc;\n    }, [])\n  };\n\n  // Debug: Log data object\n  console.log('Chart Data:', data);\n  const options = {\n    indexAxis: 'y',\n    // Horizontal bars\n    scales: {\n      x: {\n        type: 'time',\n        time: {\n          unit: 'minute',\n          displayFormats: {\n            minute: 'HH:mm'\n          }\n        },\n        title: {\n          display: true,\n          text: 'Time'\n        },\n        min: new Date(Math.min(...schedule.map(task => new Date(task.start_time)))).toISOString(),\n        max: new Date(Math.max(...schedule.map(task => new Date(task.end_time)))).toISOString()\n      },\n      y: {\n        type: 'category',\n        labels: machineIds,\n        // Explicitly set machine IDs as categories\n        title: {\n          display: true,\n          text: 'Machine'\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        display: true\n      },\n      tooltip: {\n        callbacks: {\n          label: context => {\n            const dataPoint = context.dataset.data[context.dataIndex];\n            return `Job ${context.dataset.label}: ${dataPoint.duration} minutes`;\n          }\n        }\n      }\n    },\n    elements: {\n      bar: {\n        borderWidth: 1,\n        borderColor: '#000'\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gantt-chart\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Gantt Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chart, {\n      type: \"bar\",\n      data: data,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n_c = GanttChartComponent;\nexport default GanttChartComponent;\nvar _c;\n$RefreshReg$(_c, \"GanttChartComponent\");","map":{"version":3,"names":["React","Chart","ChartJS","TimeScale","LinearScale","CategoryScale","BarElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","GanttChartComponent","schedule","console","log","length","children","fileName","_jsxFileName","lineNumber","columnNumber","machineIds","Set","map","task","machine_id","data","datasets","reduce","acc","index","dataset","find","ds","label","job_id","push","x","Date","start_time","y","duration","end_time","backgroundColor","barThickness","options","indexAxis","scales","type","time","unit","displayFormats","minute","title","display","text","min","Math","toISOString","max","labels","plugins","legend","tooltip","callbacks","context","dataPoint","dataIndex","elements","bar","borderWidth","borderColor","className","_c","$RefreshReg$"],"sources":["C:/Coding/intel-project/client/src/components/GanttChartComponent.jsx"],"sourcesContent":["import React from 'react';\r\nimport { Chart } from 'react-chartjs-2';\r\nimport 'chart.js/auto';\r\nimport { Chart as ChartJS, TimeScale, LinearScale, CategoryScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\r\nimport 'chartjs-adapter-date-fns';\r\n\r\n// Register required components\r\nChartJS.register(TimeScale, LinearScale, CategoryScale, BarElement, Title, Tooltip, Legend);\r\n\r\nfunction GanttChartComponent({ schedule }) {\r\n  // Debug: Log schedule to ensure data is valid\r\n  console.log('Schedule Data:', schedule);\r\n\r\n  // Fallback if schedule is empty\r\n  if (!schedule || !schedule.length) {\r\n    return <div>No schedule data available</div>;\r\n  }\r\n\r\n  // Extract unique machine IDs for y-axis\r\n  const machineIds = [...new Set(schedule.map(task => task.machine_id))];\r\n\r\n  const data = {\r\n    datasets: schedule.reduce((acc, task, index) => {\r\n      const dataset = acc.find(ds => ds.label === `Job ${task.job_id}`);\r\n      if (dataset) {\r\n        dataset.data.push({\r\n          x: new Date(task.start_time),\r\n          y: task.machine_id,\r\n          duration: (new Date(task.end_time) - new Date(task.start_time)) / 1000 / 60, // Duration in minutes\r\n        });\r\n      } else {\r\n        acc.push({\r\n          label: `Job ${task.job_id}`,\r\n          data: [{\r\n            x: new Date(task.start_time),\r\n            y: task.machine_id,\r\n            duration: (new Date(task.end_time) - new Date(task.start_time)) / 1000 / 60,\r\n          }],\r\n          backgroundColor: `hsl(${index * 60}, 70%, 50%)`,\r\n          barThickness: 20, // Ensure bars are visible\r\n        });\r\n      }\r\n      return acc;\r\n    }, []),\r\n  };\r\n\r\n  // Debug: Log data object\r\n  console.log('Chart Data:', data);\r\n\r\n  const options = {\r\n    indexAxis: 'y', // Horizontal bars\r\n    scales: {\r\n      x: {\r\n        type: 'time',\r\n        time: {\r\n          unit: 'minute',\r\n          displayFormats: {\r\n            minute: 'HH:mm',\r\n          },\r\n        },\r\n        title: {\r\n          display: true,\r\n          text: 'Time',\r\n        },\r\n        min: new Date(Math.min(...schedule.map(task => new Date(task.start_time)))).toISOString(),\r\n        max: new Date(Math.max(...schedule.map(task => new Date(task.end_time)))).toISOString(),\r\n      },\r\n      y: {\r\n        type: 'category',\r\n        labels: machineIds, // Explicitly set machine IDs as categories\r\n        title: {\r\n          display: true,\r\n          text: 'Machine',\r\n        },\r\n      },\r\n    },\r\n    plugins: {\r\n      legend: {\r\n        display: true,\r\n      },\r\n      tooltip: {\r\n        callbacks: {\r\n          label: (context) => {\r\n            const dataPoint = context.dataset.data[context.dataIndex];\r\n            return `Job ${context.dataset.label}: ${dataPoint.duration} minutes`;\r\n          },\r\n        },\r\n      },\r\n    },\r\n    elements: {\r\n      bar: {\r\n        borderWidth: 1,\r\n        borderColor: '#000',\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div className=\"gantt-chart\">\r\n      <h2>Gantt Chart</h2>\r\n      <Chart type=\"bar\" data={data} options={options} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GanttChartComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}