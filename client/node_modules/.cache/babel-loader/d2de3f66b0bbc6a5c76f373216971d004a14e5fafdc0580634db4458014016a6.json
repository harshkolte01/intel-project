{"ast":null,"code":"var _jsxFileName = \"C:\\\\Coding\\\\intel-project\\\\client\\\\src\\\\components\\\\GanttChartComponent.jsx\";\nimport React from 'react';\nimport { Chart } from 'react-chartjs-2';\nimport 'chart.js/auto';\nimport { Chart as ChartJS, TimeScale, LinearScale, CategoryScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport 'chartjs-adapter-date-fns';\nimport zoomPlugin from 'chartjs-plugin-zoom';\n\n// Register required components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(TimeScale, LinearScale, CategoryScale, BarElement, Title, Tooltip, Legend, zoomPlugin);\nfunction GanttChartComponent({\n  schedule,\n  machines\n}) {\n  console.log('Schedule Data:', schedule);\n  console.log('Machines Data:', machines);\n  if (!schedule || !schedule.length || !machines || !machines.length) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No schedule data available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Extract unique machine IDs from filtered schedule\n  const machineIds = [...new Set(schedule.map(task => task.machine_id))];\n  const data = {\n    datasets: schedule.reduce((acc, task, index) => {\n      const dataset = acc.find(ds => ds.label === `Job ${task.job_id}`);\n      if (dataset) {\n        dataset.data.push({\n          x: new Date(task.start_time),\n          y: task.machine_id,\n          duration: (new Date(task.end_time) - new Date(task.start_time)) / 1000 / 60\n        });\n      } else {\n        acc.push({\n          label: `Job ${task.job_id}`,\n          data: [{\n            x: new Date(task.start_time),\n            y: task.machine_id,\n            duration: (new Date(task.end_time) - new Date(task.start_time)) / 1000 / 60\n          }],\n          backgroundColor: `hsl(${index * 60}, 70%, 50%)`,\n          barThickness: Math.max(10, 40 / machineIds.length) // Dynamic thickness\n        });\n      }\n      return acc;\n    }, [])\n  };\n  console.log('Chart Data:', data);\n  const options = {\n    indexAxis: 'y',\n    scales: {\n      x: {\n        type: 'time',\n        time: {\n          unit: 'minute',\n          displayFormats: {\n            minute: 'HH:mm'\n          }\n        },\n        title: {\n          display: true,\n          text: 'Time'\n        },\n        min: new Date(Math.min(...schedule.map(task => new Date(task.start_time)))).toISOString(),\n        max: new Date(Math.max(...schedule.map(task => new Date(task.end_time)))).toISOString(),\n        ticks: {\n          autoSkip: true,\n          maxTicksLimit: 10\n        }\n      },\n      y: {\n        type: 'category',\n        labels: machineIds.map(id => {\n          const machine = machines.find(m => m.id.toString() === id);\n          return machine ? machine.name : id;\n        }),\n        // Use machine names\n        title: {\n          display: true,\n          text: 'Machine'\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        display: true,\n        position: 'top'\n      },\n      tooltip: {\n        callbacks: {\n          label: context => {\n            const dataPoint = context.dataset.data[context.dataIndex];\n            return `Job ${context.dataset.label}: ${dataPoint.duration} minutes`;\n          }\n        }\n      },\n      zoom: {\n        pan: {\n          enabled: true,\n          mode: 'x'\n        },\n        zoom: {\n          wheel: {\n            enabled: true\n          },\n          pinch: {\n            enabled: true\n          },\n          mode: 'x'\n        },\n        limits: {\n          x: {\n            min: 'original',\n            max: 'original'\n          }\n        }\n      }\n    },\n    elements: {\n      bar: {\n        borderWidth: 1,\n        borderColor: '#000'\n      }\n    },\n    responsive: true,\n    maintainAspectRatio: false\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gantt-chart\",\n    style: {\n      height: '400px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Gantt Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chart, {\n      type: \"bar\",\n      data: data,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n}\n_c = GanttChartComponent;\nexport default GanttChartComponent;\nvar _c;\n$RefreshReg$(_c, \"GanttChartComponent\");","map":{"version":3,"names":["React","Chart","ChartJS","TimeScale","LinearScale","CategoryScale","BarElement","Title","Tooltip","Legend","zoomPlugin","jsxDEV","_jsxDEV","register","GanttChartComponent","schedule","machines","console","log","length","children","fileName","_jsxFileName","lineNumber","columnNumber","machineIds","Set","map","task","machine_id","data","datasets","reduce","acc","index","dataset","find","ds","label","job_id","push","x","Date","start_time","y","duration","end_time","backgroundColor","barThickness","Math","max","options","indexAxis","scales","type","time","unit","displayFormats","minute","title","display","text","min","toISOString","ticks","autoSkip","maxTicksLimit","labels","id","machine","m","toString","name","plugins","legend","position","tooltip","callbacks","context","dataPoint","dataIndex","zoom","pan","enabled","mode","wheel","pinch","limits","elements","bar","borderWidth","borderColor","responsive","maintainAspectRatio","className","style","height","_c","$RefreshReg$"],"sources":["C:/Coding/intel-project/client/src/components/GanttChartComponent.jsx"],"sourcesContent":["import React from 'react';\r\nimport { Chart } from 'react-chartjs-2';\r\nimport 'chart.js/auto';\r\nimport { Chart as ChartJS, TimeScale, LinearScale, CategoryScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\r\nimport 'chartjs-adapter-date-fns';\r\nimport zoomPlugin from 'chartjs-plugin-zoom';\r\n\r\n// Register required components\r\nChartJS.register(TimeScale, LinearScale, CategoryScale, BarElement, Title, Tooltip, Legend, zoomPlugin);\r\n\r\nfunction GanttChartComponent({ schedule, machines }) {\r\n  console.log('Schedule Data:', schedule);\r\n  console.log('Machines Data:', machines);\r\n\r\n  if (!schedule || !schedule.length || !machines || !machines.length) {\r\n    return <div>No schedule data available</div>;\r\n  }\r\n\r\n  // Extract unique machine IDs from filtered schedule\r\n  const machineIds = [...new Set(schedule.map(task => task.machine_id))];\r\n\r\n  const data = {\r\n    datasets: schedule.reduce((acc, task, index) => {\r\n      const dataset = acc.find(ds => ds.label === `Job ${task.job_id}`);\r\n      if (dataset) {\r\n        dataset.data.push({\r\n          x: new Date(task.start_time),\r\n          y: task.machine_id,\r\n          duration: (new Date(task.end_time) - new Date(task.start_time)) / 1000 / 60,\r\n        });\r\n      } else {\r\n        acc.push({\r\n          label: `Job ${task.job_id}`,\r\n          data: [{\r\n            x: new Date(task.start_time),\r\n            y: task.machine_id,\r\n            duration: (new Date(task.end_time) - new Date(task.start_time)) / 1000 / 60,\r\n          }],\r\n          backgroundColor: `hsl(${index * 60}, 70%, 50%)`,\r\n          barThickness: Math.max(10, 40 / machineIds.length), // Dynamic thickness\r\n        });\r\n      }\r\n      return acc;\r\n    }, []),\r\n  };\r\n\r\n  console.log('Chart Data:', data);\r\n\r\n  const options = {\r\n    indexAxis: 'y',\r\n    scales: {\r\n      x: {\r\n        type: 'time',\r\n        time: {\r\n          unit: 'minute',\r\n          displayFormats: {\r\n            minute: 'HH:mm',\r\n          },\r\n        },\r\n        title: {\r\n          display: true,\r\n          text: 'Time',\r\n        },\r\n        min: new Date(Math.min(...schedule.map(task => new Date(task.start_time)))).toISOString(),\r\n        max: new Date(Math.max(...schedule.map(task => new Date(task.end_time)))).toISOString(),\r\n        ticks: {\r\n          autoSkip: true,\r\n          maxTicksLimit: 10,\r\n        },\r\n      },\r\n      y: {\r\n        type: 'category',\r\n        labels: machineIds.map(id => {\r\n          const machine = machines.find(m => m.id.toString() === id);\r\n          return machine ? machine.name : id;\r\n        }), // Use machine names\r\n        title: {\r\n          display: true,\r\n          text: 'Machine',\r\n        },\r\n      },\r\n    },\r\n    plugins: {\r\n      legend: {\r\n        display: true,\r\n        position: 'top',\r\n      },\r\n      tooltip: {\r\n        callbacks: {\r\n          label: (context) => {\r\n            const dataPoint = context.dataset.data[context.dataIndex];\r\n            return `Job ${context.dataset.label}: ${dataPoint.duration} minutes`;\r\n          },\r\n        },\r\n      },\r\n      zoom: {\r\n        pan: {\r\n          enabled: true,\r\n          mode: 'x',\r\n        },\r\n        zoom: {\r\n          wheel: { enabled: true },\r\n          pinch: { enabled: true },\r\n          mode: 'x',\r\n        },\r\n        limits: {\r\n          x: { min: 'original', max: 'original' },\r\n        },\r\n      },\r\n    },\r\n    elements: {\r\n      bar: {\r\n        borderWidth: 1,\r\n        borderColor: '#000',\r\n      },\r\n    },\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n  };\r\n\r\n  return (\r\n    <div className=\"gantt-chart\" style={{ height: '400px' }}>\r\n      <h2>Gantt Chart</h2>\r\n      <Chart type=\"bar\" data={data} options={options} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GanttChartComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}